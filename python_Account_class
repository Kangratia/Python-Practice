import random
import datetime

def generate_transaction_id():
  while True:
    transaction_id = "".join(str(random.randint(0, 9)) for _ in range(9))
    if transaction_id not in transactions:
      return transaction_id
transactions = set()

class Account:

  def __init__(self,name,balance):
    self.deposit_count = 0
    self.deposit_log = []
    self.withdraw_log = []

    self.name = name
    self.balance = balance
    self.bankname = "SC은행"

    num1 = random.randint(0,999)
    num2 = random.randint(0,99)
    num3 = random.randint(0,999999)

    num1 = str(num1).zfill(3) #0값을 채움
    num2 = str(num2).zfill(2)
    num3 = str(num3).zfill(6)
    self.account_number = num1 + '-' + num2 + '-' + num3

  def deposit(self,amount):
    if amount >= 1:
      current_time = datetime.datetime.now() #현재 시간 Get
      transaction_id = generate_transaction_id()
      self.deposit_log.append((amount, current_time, transaction_id)) #금액과 시간 저장
      self.balance += amount

      self.deposit_count += 1
      if self.deposit_count % 5 == 0:
        self.balance = (self.balance * 1.01)

  def withdraw(self,amount):
    if self.balance > amount:
      current_time = datetime.datetime.now() #현재 시간 Get
      transaction_id = generate_transaction_id()
      self.withdraw_log.append((amount,current_time, transaction_id)) #금액과 시간 저장
      self.balance -= amount

  def display_info(self):
    print("은행이름: ", self.bankname,)
    print("예금주: ", self.name)
    print("계좌번호: ", self.account_number)
    print("잔고: ", f"{self.balance:,}","원")

  def deposit_history(self):
    for amount, time, transaction_id in self.deposit_log:
      print(f"Deposited {amount} at {time} (Transaction ID: {transaction_id})")

  def withdraw_history(self):
    for amount, time, transaction_id in self.withdraw_log:
      print(f"Withdrew {amount} at {time} (Transaction ID: {transaction_id})")

  def all_history(self):
    print("입금내역: "),self.deposit_history()
    print("출금내역: "),self.withdraw_history()
  
  def transfer(self, amount, recipient_account):
    if self.balance >= amount:
      try:
        recipient_account.deposit(amount)
        self.withdraw(amount)
        print("이체 완료!")
      except AttributeError:
          print("입금자 계좌번호를 확인해주세요")
      else:
        print("잔액이 부족합니다.")
lee = Account('파이썬',100)
#print(lee.name)
#print(lee.balance)
#print(lee.bankname)
print(lee.account_number)

lee.deposit(100)
lee.deposit(200)
lee.deposit(200)
lee.deposit(200)
lee.deposit(200)
#print(lee.balance)
lee.deposit_history()
lee.withdraw(500)
lee.withdraw(10)
lee.withdraw(5)
lee.withdraw(20)
#print(lee.balance)
lee.withdraw_history()
#lee.display_info()
lee.all_history()

account1 = Account("Alice", 1000)
account2 = Account("Bob", 500)

account1.transfer(200, account2)
account1.display_info()
#계좌입금
account1.deposit(1000)